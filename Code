import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import SGDRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

data= pd.read_csv("train.csv")

df=data

df.info()

df.head()

numerical_features = df.select_dtypes(include=['int64', 'float64']).drop(columns=['SalePrice'])

numerical_features.fillna(0, inplace=True)

scaler = StandardScaler()

target = df['SalePrice']

scaled_numerical_features = scaler.fit_transform(numerical_features)

X_train, X_test, y_train, y_test = train_test_split(scaled_numerical_features, target, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

plt.scatter(y_test, y_pred)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs. Predicted House Prices')
plt.show()

import seaborn as sns
# Make predictions on the test set
y_pred = model.predict(X_test)
# Create a DataFrame for actual and predicted values
results_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
# Plot actual vs. predicted prices with regression line
sns.lmplot(x='Actual', y='Predicted', data=results_df, height=6, aspect=1.5)
plt.title('Actual vs. Predicted House Prices with Regression Line')
plt.show()

mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

